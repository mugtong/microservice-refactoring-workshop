package app.anne.item.infrastructure;

import app.anne.item.domain.model.aggregates.OwnedItemStatus;
import app.anne.item.domain.model.aggregates.OwnerId;
import app.anne.item.domain.model.aggregates.ItemId;
import app.anne.item.domain.model.aggregates.OwnedItem;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import software.amazon.awssdk.enhanced.dynamodb.extensions.annotations.DynamoDbAutoGeneratedTimestampAttribute;
import software.amazon.awssdk.enhanced.dynamodb.mapper.annotations.*;

import java.time.Instant;

@DynamoDbBean
@NoArgsConstructor
@Getter
@Setter
public class ItemRecord {

    public static String getPartitionKeyValue(ItemId itemId) {
        return String.format("ITEM#%s", itemId.getValue());
    }

    public static String getSortKeyValue() {
        return "ITEM";
    }

    public static String getGsi1PartitionKeyValue(OwnerId ownerId) {
        return String.format("USER#%s#ITEM", ownerId.getValue());
    }

    public static String getGsi2PartitionKeyValue() {
        return "FEED";
    }

    public static OwnedItem convert(ItemRecord record) {
        return OwnedItem.builderForExisting(new OwnerId(record.getOwner()), new ItemId(record.getItemId()))
                .status(OwnedItemStatus.valueOf(record.getStatus()))
                .adult(record.getAdult())
                .author(record.getAuthor())
                .categoryId(record.getCategoryId())
                .categoryName(record.getCategoryName())
                .description(record.getDescription())
                .imageUrl(record.getImageUrl())
                .ownerName(record.getOwnerName())
                .ownerImageUrl(record.getOwnerImageUrl())
                .isbn(record.getIsbn())
                .isbn13(record.getIsbn13())
                .link(record.getLink())
                .pubDate(record.getPubDate())
                .publisher(record.getPublisher())
                .subTitle(record.getSubTitle())
                .title(record.getTitle())
                .type(record.getType())
                .updatedAt(record.getUpdatedAt())
                .build();
    }

    public static ItemRecord convertFrom(OwnedItem entity) {
        ItemRecord record = new ItemRecord();
        record.pk = ItemRecord.getPartitionKeyValue(entity.getItem());
        record.sk = ItemRecord.getSortKeyValue();
        record.gsi1Pk = ItemRecord.getGsi1PartitionKeyValue(entity.getOwner());
        record.gsi1Sk = entity.getUpdatedAt();
        record.gsi2Pk = entity.isPublic() ? ItemRecord.getGsi2PartitionKeyValue() : null;
        record.gsi2Sk = entity.isPublic() ? entity.getUpdatedAt() : null;
        record.owner = entity.getOwner().getValue();
        record.ownerName = entity.getOwnerName();
        record.ownerImageUrl = entity.getOwnerImageUrl();
        record.itemId = entity.getItem().getValue();
        record.status = entity.getStatus().name();
        record.adult = entity.getAdult();
        record.author = entity.getAuthor();
        record.categoryId = entity.getCategoryId();
        record.categoryName = entity.getCategoryName();
        record.description = entity.getDescription();
        record.imageUrl = entity.getImageUrl();
        record.isbn = entity.getIsbn();
        record.isbn13 = entity.getIsbn13();
        record.link = entity.getLink();
        record.pubDate = entity.getPubDate();
        record.publisher = entity.getPublisher();
        record.subTitle = entity.getSubTitle();
        record.title = entity.getTitle();
        record.type = "BOOK";
        record.updatedAt = entity.getUpdatedAt();
        return record;
    }

    private String pk;
    private String sk;
    private String gsi1Pk;
    private Instant gsi1Sk;
    private String gsi2Pk;
    private Instant gsi2Sk;
    private String owner;
    private String ownerName;
    private String ownerImageUrl;
    private String itemId;
    private String status;
    private String adult;
    private String author;
    private String categoryId;
    private String categoryName;
    private String description;
    private String imageUrl;
    private String isbn;
    private String isbn13;
    private String link;
    private String pubDate;
    private String publisher;
    private String subTitle;
    private String title;
    private String type;
    private Instant updatedAt;

    @DynamoDbPartitionKey
    @DynamoDbSecondarySortKey(indexNames = {"Inverted"})
    @DynamoDbAttribute("PK")
    public String getPk() {
        return pk;
    }

    @DynamoDbSortKey
    @DynamoDbSecondaryPartitionKey(indexNames = {"Inverted"})
    @DynamoDbAttribute("SK")
    public String getSk() {
        return sk;
    }

    @DynamoDbSecondarySortKey(indexNames = {"GSI3"})
    @DynamoDbSecondaryPartitionKey(indexNames = {"GSI1"})
    @DynamoDbAttribute("GSI1_PK")
    public String getGsi1Pk() {
        return gsi1Pk;
    }

    @DynamoDbSecondarySortKey(indexNames = {"GSI1"})
    @DynamoDbAttribute("GSI1_SK")
    @DynamoDbAutoGeneratedTimestampAttribute
    public Instant getGsi1Sk() {
        return gsi1Sk;
    }

    @DynamoDbSecondaryPartitionKey(indexNames = {"GSI2"})
    @DynamoDbAttribute("GSI2_PK")
    public String getGsi2Pk() {
        return gsi2Pk;
    }

    @DynamoDbSecondarySortKey(indexNames = {"GSI2"})
    @DynamoDbAttribute("GSI2_SK")
    @DynamoDbAutoGeneratedTimestampAttribute
    public Instant getGsi2Sk() {
        return gsi2Sk;
    }

    @DynamoDbSecondaryPartitionKey(indexNames = {"GSI3"})
    @DynamoDbAttribute("isbn13")
    public String getIsbn13() {
        return isbn13;
    }

    @DynamoDbAttribute("ownerId")
    public String getOwner() {
        return owner;
    }

    @DynamoDbAttribute("stat")
    public String getStatus() {
        return status;
    }

    @DynamoDbAttribute("ut")
    @DynamoDbAutoGeneratedTimestampAttribute
    public Instant getUpdatedAt() {
        return updatedAt;
    }
}
